<?php 
/**
 * Implements hook_block_info()
 */
function md_wordcloud_block_info() {
  $blocks = array();
  
  $taxonomy_vocabularies = taxonomy_get_vocabularies();
  if (is_array($taxonomy_vocabularies) && !empty($taxonomy_vocabularies)) {
    foreach ($taxonomy_vocabularies as $voc) {
      $blocks[$voc->vid]['info'] = 'Word Cloud in ' . $voc->name;
      $blocks[$voc->vid]['cache'] = DRUPAL_NO_CACHE;
    }
	###CUSTOMIZATION START###
	//Add new Block (selvoc = selected vocabularies) for selected vocabularies.
	$blocks['selvoc']['info'] = 'Word Cloud selected vocabularies';
    $blocks['selvoc']['cache'] = DRUPAL_NO_CACHE;
	###CUSTOMIZATION END###
  }

  return $blocks;
}

/**
 * Implements hook_block_view()
 */
function md_wordcloud_block_view($delta = '') {
  $blocks_configure = variable_get('md_wordcloud_blocks_configure');
  if ($blocks_configure == NULL || !array_key_exists('block_' . $delta, $blocks_configure)) {
    return ;
  }

  $block_data = $blocks_configure['block_' . $delta];

  $number_words = $block_data['max_word'];
  $width = $block_data['width'];
  $height = $block_data['height'];
  $angle_from = $block_data['angle_from'];
  $angle_to = $block_data['angle_to'];
  $angle_count = $block_data['angle_count'];
  $words_scale = $block_data['words_scale'];
  
  ###CUSTOMIZATION START###
  //get configuration of the front size
  $fontsize_min = $block_data['fontsize_block_min'];
  $fontsize_max = $block_data['fontsize_block_max'];

  //Use vids from configuration instead of vid from delta, if it is the selvoc block.
  if($delta == 'selvoc'){
	$vids = $block_data['vids'];
	$result = get_terms($vids, $number_words);
  }
  else{
	$result = get_terms(array($delta), $number_words);
  }
  
  //Remove blacklisted taxonomy terms.
  $term_blacklist = $block_data['term_blacklist'];
  $result = md_wordcloud_apply_term_blacklist($result, $term_blacklist);
  ###CUSTOMIZATION END###
  global $base_url;

  drupal_add_js(drupal_get_path('module', 'md_wordcloud') . '/js/md_wordcloud.js');
  ###CUSTOMIZATION START###
  //Add 'fontsize_min' => $fontsize_min, 'fontsize_max' => $fontsize_max to the array
  drupal_add_js(array('blocks_data' => array(array('block_id' => $delta, 'width' => $width, 'height' => $height, 'angle_from' => $angle_from, 'angle_to' => $angle_to, 'angle_count' => $angle_count, 'words_scale' => $words_scale, 'terms_url' => $result->terms_url, 'words' => $result->words, 'counts' => $result->counts, 'fontsize_min' => $fontsize_min, 'fontsize_max' => $fontsize_max))), 'setting');
  ###CUSTOMIZATION END###
  $blocks = array();
  if ($voc = taxonomy_vocabulary_load($delta)) {
    $blocks['subject'] = variable_get('md_wordcloud_block_title_' . $delta, t('Tags in @voc', array('@voc' => $voc->name)));
	###CUSTOMIZATION START###
	//Use url and t function to get a localized link
    $blocks['content'] = '<div id="terms-cloud-' . $delta . '" class="cloud-block"><svg></svg><div><a href="' . $base_url . url('md-taxonomy/page/' . $voc->vid) . '">' . t('More') . '</a></div></div>';
    ###CUSTOMIZATION END###
  }
  ###CUSTOMIZATION START###
  //Set title and more link for selvoc block.
  else if($voc = $delta){
	$blocks['subject'] = variable_get('md_wordcloud_block_title_' . $delta, t('Tags in @voc', array('@voc' => $delta)));
	//Use url and t function to get a localized link
    $blocks['content'] = '<div id="terms-cloud-' . $delta . '" class="cloud-block"><svg></svg><div><a href="' . $base_url . url('md-taxonomy/page/' . $delta) . '">' . t('More') . '</a></div></div>';
  }
  ###CUSTOMIZATION END###
  return $blocks;
}

/**
 * Implements hook_block_configure()
 */
function md_wordcloud_block_configure($delta = '') {
  $form = array();
  static $default_configure = array(
      'max_word' => 100,
      'width' => 300,
      'height' => 300,
      'angle_from' => -90,
      'angle_to' => 90,
      'angle_count' => 5,
      'words_scale' => 'linear',
	  
  );
  
  ###CUSTOMIZATION START###
  //set default font sizes.
  $default_configure['fontsize_block_min'] = 10;
  $default_configure['fontsize_block_max'] = 80;
  $default_configure['fontsize_page_min'] = 10;
  $default_configure['fontsize_page_max'] = 80;
  //Add arrays for vids and a blacklist to the default_configuration if it is the selvoc block.
  $default_configure['term_blacklist'] = array();
  if($delta == 'selvoc'){
	$taxonomy_vocabularies = taxonomy_get_vocabularies();
	$vids = array();
	if (is_array($taxonomy_vocabularies) && !empty($taxonomy_vocabularies)) {
		foreach ($taxonomy_vocabularies as $voc) {
		  $vids[] = $voc->vid;
		}
	}
	$default_configure['vids'] = $vids;
  }
  else{
	$result = get_terms(array($delta));
  }
  ###CUSTOMIZATION END###
  
  $blocks_configure = variable_get('md_wordcloud_blocks_configure');
  if ($blocks_configure == NULL || !array_key_exists('block_' . $delta, $blocks_configure)) {
    $block_data = $default_configure;
  }
  else {
    $block_data = $blocks_configure['block_' . $delta];
  }
  
  ###CUSTOMIZATION START###
  //Use vids from configuration instead of vid from delta, if it is the selvoc block.
  if($delta == 'selvoc'){
	$result = get_terms($block_data['vids']);
  }
  
  //Remove blacklisted taxonomy terms.
  $term_blacklist = $block_data['term_blacklist'];
  $result = md_wordcloud_apply_term_blacklist($result, $term_blacklist);
  ###CUSTOMIZATION END###
  
  drupal_add_css(drupal_get_path('module', 'md_wordcloud') . '/css/md_wordcloud_preview.css');
  drupal_add_js(drupal_get_path('module', 'md_wordcloud') . '/js/md_wordcloud_preview.js');
  drupal_add_js(array('words' => $result->words, 'counts' => $result->counts), 'setting');

  $form['block_preview'] = array(
      '#markup' => '<div id="md-preview-wrap"><h3 class="preview-label">Preview</h3><div id="preview-md-taxonomy" class="cloud-preview"></div></div>',
  );

  $form['max_words'] = array(
      '#type' => 'textfield',
      '#title' => t('Max words to display'),
      '#default_value' => $block_data['max_word'],
  );

  $form['block_size'] = array(
      '#type' => 'label',
      '#title' => 'Block size',
  );

  $form['width'] = array(
      '#type' => 'textfield',
      '#title' => 'Width:',
      '#default_value' => $block_data['width'],
      '#prefix' => '<div class="md-angle">',
      '#field_suffix' => 'px',
  );

  $form['height'] = array(
      '#type' => 'textfield',
      '#title' => 'Height:',
      '#default_value' => $block_data['height'],
      '#suffix' => '</div><!-- /.md-angle -->',
      '#field_suffix' => 'px',
  );

  $form['words_scale'] = array(
      '#type' => 'radios',
      '#title' => t('Words scale'),
      '#options' => array('log' => t('log n'), 'sqrt' => t('âˆšn'), 'linear' => t('n')),
      '#default_value' => $block_data['words_scale'],
  );

  $form['angle_count'] = array(
      '#type' => 'textfield',
      '#title' => t('Words orientation'),
      '#default_value' => $block_data['angle_count'],
      '#attributes' => array('min' => 0, 'max' => 100, ),
      '#prefix' => '<div class="md-angle">',
  );

  $form['angle_from'] = array(
      '#type' => 'textfield',
      '#title' => t('From:'),
      '#default_value' => $block_data['angle_from'],
      '#attributes' => array('min' => -90, 'max' => 90, ),
      '#field_suffix' => '&deg; to ',
  );

  $form['angle_to'] = array(
      '#type' => 'textfield',
      '#title' => t('to:'),
      '#attributes' => array('min' => -90, 'max' => 90, ),
      '#default_value' => $block_data['angle_to'],
      '#suffix' => '</div><!-- /.md-angle -->',
      '#field_suffix' => '&deg;',
  );

  $form['angle'] = array(
      '#markup' => '<div id="angles"></div>',
  );
  
  ###CUSTOMIZATION START###
  //Add forms of vids and term_blackist to the block settings.
  if($delta == 'selvoc'){
	$form['vids'] = array(
		'#type' => 'textfield',
		'#title' => t('Vocabulary IDs. Separate with \',\''),
		'#default_value' => implode(',', $block_data['vids']),
	);
  }
  
  $form['term_blacklist'] = array(
      '#type' => 'textfield',
      '#title' => t('Blacklisted Taxonomy Terms. Separate with \',\''),
      '#default_value' => implode(',', $block_data['term_blacklist']),
  );
  //Add forms for font sizes.
  $form['fontsize_block_min'] = array(
      '#type' => 'textfield',
      '#title' => t('Min'),
	  '#prefix' => '<p>' .t('Set Block font size:') .'</p><div class="md-fontsize-block">',
      '#default_value' => $block_data['fontsize_block_min'],
  );
  
  $form['fontsize_block_max'] = array(
      '#type' => 'textfield',
      '#title' => t('Max'),
	  '#suffix' => '</div><!-- /.md-fontsize-block -->',
      '#default_value' => $block_data['fontsize_block_max'],
  );
  
  $form['fontsize_page_min'] = array(
      '#type' => 'textfield',
      '#title' => t('Min'),
	  '#prefix' => '<p>' .t('Set Page font size:') .'</p><div class="md-fontsize-page">',
      '#default_value' => $block_data['fontsize_page_min'],
  );
  
  $form['fontsize_page_max'] = array(
      '#type' => 'textfield',
      '#title' => t('Max'),
	  '#suffix' => '</div><!-- /.md-fontsize-page -->',
      '#default_value' => $block_data['fontsize_page_max'],
  );
  ###CUSTOMIZATION END###

  return $form;
}

/**
 * Implements hook_block_save()
 */
function md_wordcloud_block_save($delta = '', $edit = array()) {
  $blocks_configure = variable_get('md_wordcloud_blocks_configure', array());

  $block = array();
  $block['max_word'] = is_numeric($edit['max_words'])? $edit['max_words'] : 100;
  $block['width'] = is_numeric($edit['width']) ? $edit['width'] : 300;
  $block['height'] = is_numeric($edit['height']) ? $edit['height'] : 300;
  $block['angle_from'] = is_numeric($edit['angle_from']) ? $edit['angle_from'] : -90;
  $block['angle_to'] = is_numeric($edit['angle_to']) ? $edit['angle_to'] : 90;
  $block['angle_count'] = is_numeric($edit['angle_count']) ? $edit['angle_count'] : 5;
  $block['words_scale'] = $edit['words_scale'];
  
  ###CUSTOMIZATION START###
  //Filter inputs for font sizes.
  $block['fontsize_block_min'] = is_numeric($edit['fontsize_block_min']) ? $edit['fontsize_block_min'] : 10;
  $block['fontsize_block_max'] = is_numeric($edit['fontsize_block_max']) ? $edit['fontsize_block_max'] : 80;
  
  $block['fontsize_page_min'] = is_numeric($edit['fontsize_page_min']) ? $edit['fontsize_page_min'] : 10;
  $block['fontsize_page_max'] = is_numeric($edit['fontsize_page_max']) ? $edit['fontsize_page_max'] : 80;
  //Filter input for vids and term_blacklist
  if($delta == 'selvoc'){
	$vids = explode(',', $edit['vids']);
	$numeric = true;
	for($i = 0; $i<count($vids); $i++){
		$vids[$i] = trim($vids[$i]);
		if(!is_numeric($vids[$i])){
			$numeric = false;
		}
	}
	if($numeric){
		$block['vids'] = $vids;
	}
	else{
		//Use last working configuration if there is an error in the new input.
		$block['vids'] = $blocks_configure['block_' . $delta]['vids'];
	}
  }
  
  $term_blacklist_string = trim($edit['term_blacklist']);
  if($term_blacklist_string === ''){
	//Save an empty array if the box of the term_blacklist is empty.
	$block['term_blacklist'] = array();
  }
  else{
	  $term_blacklist = explode(',', $term_blacklist_string);
	  for($i = 0; $i<count($term_blacklist); $i++){
		$term_blacklist[$i] = trim($term_blacklist[$i]);
	  }
	  $block['term_blacklist'] = $term_blacklist;
  }
  ###CUSTOMIZATION END###
  
  $blocks_configure['block_' . $delta] = $block;
  variable_set('md_wordcloud_blocks_configure', $blocks_configure);
}

/**
 * Implements hook_menu()
 */
function md_wordcloud_menu() {
  $items = array();
  $items['md-taxonomy/page/%md_wordcloud_vocs'] = array(
      'title' => 'Word Cloud ',
      'page callback' => 'md_wordcloud_page_list',
      'page arguments' => array(2),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_SUGGESTED_ITEM,
  );

  return $items;
}

/**
 * Generate page to display cloud tags
 * @param array $vocs_id - list vocabularies id
 * @return string block contains cloud data
 */
function md_wordcloud_page_list($vocs_id) {
  if (is_array($vocs_id)) {
  
	###CUSTOMIZATION START###
	//Use function parameter to get the results if the block is not a selvoc block.
	if($vocs_id[0] != 'selvoc'){
		$results = get_terms($vocs_id);
	}
	###CUSTOMIZATION END###
	
    $blocks_configure = variable_get('md_wordcloud_blocks_configure');
    if ($blocks_configure == NULL || !array_key_exists('block_' . $vocs_id[0], $blocks_configure)) {
      return '<div id="page-terms"></div>';
    }

	$block_data = $blocks_configure['block_' . $vocs_id[0]];
	
	###CUSTOMIZATION START###
	//Use vids from configuration instead of vid from delta, if it is the selvoc block.
	if($vocs_id[0] == 'selvoc'){
		$results = get_terms($block_data['vids']);
	}
	//Remove blacklisted taxonomy terms.
	$term_blacklist = $block_data['term_blacklist'];
	$results = md_wordcloud_apply_term_blacklist($results, $term_blacklist);
	###CUSTOMIZATION END###
	
    $setting = array(
        'terms_url' => $results->terms_url,
        'words' => $results->words,
        'counts' => $results->counts,
        'words_scale' => $block_data['words_scale'],
        'angle_count' => $block_data['angle_count'],
        'angle_from' => $block_data['angle_from'],
        'angle_to' => $block_data['angle_to'],
		###CUSTOMIZATION START###
		//Add font size values to the array, which will be given to the javascript.
		'fontsize_min' => $block_data['fontsize_page_min'],
		'fontsize_max' => $block_data['fontsize_page_max'],
		###CUSTOMIZATION END###
    );
	
    drupal_add_js(array('page_data' => $setting), 'setting');
  }

  drupal_add_js(drupal_get_path('module', 'md_wordcloud') . '/js/md_wordcloud_page.js');
  
  ###CUSTOMIZATION START###
  //Set different tile if it is the selvoc block.
  if($vocs_id[0] == 'selvoc'){
	drupal_set_title(t('Tag Cloud'));
  }
  else{
	$term = taxonomy_vocabulary_load($vocs_id[0]);
	if ($term) {
		drupal_set_title(t('Word Cloud in ' . $term->name));
	}
  }
  ###CUSTOMIZATION END###
  
  return '<div id="page-terms"></div>';
}

/**
 * Menu wildcard loader.
 */
function  md_wordcloud_vocs_load($vocs) {
  if (is_numeric($vocs)) {
    $vocs = array($vocs);
  }
  
  ###CUSTOMIZATION START###
  //Set $vocs to 'selvoc' if the URL ends with '/selvoc'
  elseif($vocs == 'selvoc'){
	$vocs = array('selvoc');
  }
  ###CUSTOMIZATION END###
  
  elseif (preg_match('/^([0-9]+,){1,5}[0-9]+$/', $vocs)) {
    $vocs = explode(',', $vocs);
  }
  return $vocs;
}

/**
 * Query to get terms  in database
 * Parameters: $vids - Array id of vocabularies
 * 						 $size - Number terms to get. Default is 100.
 * Return: Object contains terms, url's term, count's term.
 */
function get_terms($vids, $size = NULL) {
  global $base_url;
  $terms_url = array();
  $words = array();
  $counts = array();

  if (is_array($vids) && count($vids) > 0) {
    $string_query = 'SELECT COUNT(*) AS num, ttd.tid, ttd.vid, ttd.name, ttd.description FROM {taxonomy_term_data} ttd INNER JOIN {taxonomy_index} tind ON ttd.tid = tind.tid INNER JOIN {node} nod ON tind.nid = nod.nid WHERE ttd.vid IN (' . implode(',', array_fill(0, count($vids), '?')) . ') GROUP BY ttd.tid, ttd.vid, ttd.name, ttd.description HAVING COUNT(*) > 0 ORDER BY num DESC';

    if ($size) {
      $results = db_query_range($string_query, 0, $size, $vids);
    }
    else {
      $results = db_query($string_query, $vids);
    }
	global $language;
    foreach ($results as $tag) {
      $counts[] = $tag->num;
	  $term = taxonomy_term_load($tag->tid);
	  ###CUSTOMIZATION START###
	  //Use translated term name, if i18n_taxonomy module is installed.
	  if(module_exists('i18n_taxonomy')){
		$term_name = i18n_taxonomy_term_name($term, $language->language);
		$words[] =  $term_name;
	  }
	  else{
		$term_name = $tag->name;
		$words[] =  $term_name;
	  }
	  ###CUSTOMIZATION END###
      $term_id = (object)array('tid' => $tag->tid);
      $org_url = taxonomy_term_uri($term_id);
	  ###CUSTOMIZATION START###
	  //Get localized link
      $url_alias = url($org_url['path']);
      $terms_url[$term_name] = $base_url . $url_alias;
	  ###CUSTOMIZATION END###
    }

    $result = (object) array('terms_url' => $terms_url, 'words' => $words, 'counts' => $counts);
    return $result;
  }
}
###CUSTOMIZATION START###
/**
 * Remove blacklisted results from result array.
 * Parameters: $result - Result object, generated by the get_terms function.
 * 			   $term_blacklist - Array of blacklisted terms (Strings)
 * Return: Result array without the blacklisted terms.
*/
function md_wordcloud_apply_term_blacklist($result, $term_blacklist){
  //Do not filter if the term_blacklist array is empty.
  if(count($term_blacklist)>0){
	$words_new = array();
	$terms_url_new = array();
	$counts_new = array();
	
	$words_old = $result->words;
	$terms_url_old = $result->terms_url;
	$counts_old = $result->counts;
	
	//Go through the results. Do not put a terms to the new results if it is blacklisted.
	for($i = 0; $i<count($words_old); $i++){
		if(!in_array($words_old[$i], $term_blacklist)){
			$words_new[] = $words_old[$i];
			$terms_url_new[$words_old[$i]] = $terms_url_old[$words_old[$i]];
			$counts_new[] = $counts_old[$i];
		}
	}
	
	
	$result_new = (object) array('terms_url' => $terms_url_new, 'words' => $words_new, 'counts' => $counts_new);
	return $result_new;
  }
  //If term_blackist array is empty:
  return $result;
}
 ###CUSTOMIZATION END###
